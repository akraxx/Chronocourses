//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Chronocourses.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Shop))]
    [KnownType(typeof(Product))]
    public partial class Entity: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propriétés primitives
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propriété 'ID' fait partie de la clé de l'objet et ne peut pas être modifiée. Les modifications des propriétés de clés sont possibles à condition que l'objet ne soit pas suivi ou qu'il soit dans l'état ajouté.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public int ShopID
        {
            get { return _shopID; }
            set
            {
                if (_shopID != value)
                {
                    ChangeTracker.RecordOriginalValue("ShopID", _shopID);
                    if (!IsDeserializing)
                    {
                        if (Shop != null && Shop.ID != value)
                        {
                            Shop = null;
                        }
                    }
                    _shopID = value;
                    OnPropertyChanged("ShopID");
                }
            }
        }
        private int _shopID;
    
        [DataMember]
        public int PositionX
        {
            get { return _positionX; }
            set
            {
                if (_positionX != value)
                {
                    _positionX = value;
                    OnPropertyChanged("PositionX");
                }
            }
        }
        private int _positionX;
    
        [DataMember]
        public int PositionY
        {
            get { return _positionY; }
            set
            {
                if (_positionY != value)
                {
                    _positionY = value;
                    OnPropertyChanged("PositionY");
                }
            }
        }
        private int _positionY;
    
        [DataMember]
        public string Label
        {
            get { return _label; }
            set
            {
                if (_label != value)
                {
                    _label = value;
                    OnPropertyChanged("Label");
                }
            }
        }
        private string _label;
    
        [DataMember]
        public bool Container
        {
            get { return _container; }
            set
            {
                if (_container != value)
                {
                    _container = value;
                    OnPropertyChanged("Container");
                }
            }
        }
        private bool _container;

        #endregion
        #region Propriétés de navigation
    
        [DataMember]
        public Shop Shop
        {
            get { return _shop; }
            set
            {
                if (!ReferenceEquals(_shop, value))
                {
                    var previousValue = _shop;
                    _shop = value;
                    FixupShop(previousValue);
                    OnNavigationPropertyChanged("Shop");
                }
            }
        }
        private Shop _shop;
    
        [DataMember]
        public TrackableCollection<Product> Product
        {
            get
            {
                if (_product == null)
                {
                    _product = new TrackableCollection<Product>();
                    _product.CollectionChanged += FixupProduct;
                }
                return _product;
            }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Impossible de définir FixupChangeTrackingCollection lorsque ChangeTracking est activé");
                    }
                    if (_product != null)
                    {
                        _product.CollectionChanged -= FixupProduct;
                    }
                    _product = value;
                    if (_product != null)
                    {
                        _product.CollectionChanged += FixupProduct;
                    }
                    OnNavigationPropertyChanged("Product");
                }
            }
        }
        private TrackableCollection<Product> _product;

        #endregion
        #region Suivi des modifications
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Ce type d'entité est l'extrémité dépendante dans au moins une association qui effectue des suppressions en cascade.
        // Ce gestionnaire d'événements traitera les notifications qui se produisent lors de la suppression de l'extrémité principale.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Shop = null;
            Product.Clear();
        }

        #endregion
        #region Correction d'association
    
        private void FixupShop(Shop previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Entity.Contains(this))
            {
                previousValue.Entity.Remove(this);
            }
    
            if (Shop != null)
            {
                if (!Shop.Entity.Contains(this))
                {
                    Shop.Entity.Add(this);
                }
    
                ShopID = Shop.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Shop")
                    && (ChangeTracker.OriginalValues["Shop"] == Shop))
                {
                    ChangeTracker.OriginalValues.Remove("Shop");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Shop", previousValue);
                }
                if (Shop != null && !Shop.ChangeTracker.ChangeTrackingEnabled)
                {
                    Shop.StartTracking();
                }
            }
        }
    
        private void FixupProduct(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    if (!item.Entity.Contains(this))
                    {
                        item.Entity.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Product", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (item.Entity.Contains(this))
                    {
                        item.Entity.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Product", item);
                    }
                }
            }
        }

        #endregion
    }
}
