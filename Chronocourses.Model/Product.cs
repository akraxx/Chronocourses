//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Chronocourses.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(TypeProduct))]
    [KnownType(typeof(Entity))]
    public partial class Product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propriétés primitives
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propriété 'ID' fait partie de la clé de l'objet et ne peut pas être modifiée. Les modifications des propriétés de clés sont possibles à condition que l'objet ne soit pas suivi ou qu'il soit dans l'état ajouté.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public double Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private double _price;
    
        [DataMember]
        public int BrandID
        {
            get { return _brandID; }
            set
            {
                if (_brandID != value)
                {
                    ChangeTracker.RecordOriginalValue("BrandID", _brandID);
                    if (!IsDeserializing)
                    {
                        if (Brand != null && Brand.ID != value)
                        {
                            Brand = null;
                        }
                    }
                    _brandID = value;
                    OnPropertyChanged("BrandID");
                }
            }
        }
        private int _brandID;
    
        [DataMember]
        public int TypeProductID
        {
            get { return _typeProductID; }
            set
            {
                if (_typeProductID != value)
                {
                    ChangeTracker.RecordOriginalValue("TypeProductID", _typeProductID);
                    if (!IsDeserializing)
                    {
                        if (TypeProduct != null && TypeProduct.ID != value)
                        {
                            TypeProduct = null;
                        }
                    }
                    _typeProductID = value;
                    OnPropertyChanged("TypeProductID");
                }
            }
        }
        private int _typeProductID;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool Available
        {
            get { return _available; }
            set
            {
                if (_available != value)
                {
                    _available = value;
                    OnPropertyChanged("Available");
                }
            }
        }
        private bool _available;

        #endregion
        #region Propriétés de navigation
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public TypeProduct TypeProduct
        {
            get { return _typeProduct; }
            set
            {
                if (!ReferenceEquals(_typeProduct, value))
                {
                    var previousValue = _typeProduct;
                    _typeProduct = value;
                    FixupTypeProduct(previousValue);
                    OnNavigationPropertyChanged("TypeProduct");
                }
            }
        }
        private TypeProduct _typeProduct;
    
        [DataMember]
        public TrackableCollection<Entity> Entity
        {
            get
            {
                if (_entity == null)
                {
                    _entity = new TrackableCollection<Entity>();
                    _entity.CollectionChanged += FixupEntity;
                }
                return _entity;
            }
            set
            {
                if (!ReferenceEquals(_entity, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Impossible de définir FixupChangeTrackingCollection lorsque ChangeTracking est activé");
                    }
                    if (_entity != null)
                    {
                        _entity.CollectionChanged -= FixupEntity;
                    }
                    _entity = value;
                    if (_entity != null)
                    {
                        _entity.CollectionChanged += FixupEntity;
                    }
                    OnNavigationPropertyChanged("Entity");
                }
            }
        }
        private TrackableCollection<Entity> _entity;

        #endregion
        #region Suivi des modifications
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Ce type d'entité est l'extrémité dépendante dans au moins une association qui effectue des suppressions en cascade.
        // Ce gestionnaire d'événements traitera les notifications qui se produisent lors de la suppression de l'extrémité principale.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brand = null;
            TypeProduct = null;
            Entity.Clear();
        }

        #endregion
        #region Correction d'association
    
        private void FixupBrand(Brand previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Product.Contains(this))
            {
                previousValue.Product.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.Product.Contains(this))
                {
                    Brand.Product.Add(this);
                }
    
                BrandID = Brand.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
            }
        }
    
        private void FixupTypeProduct(TypeProduct previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Product.Contains(this))
            {
                previousValue.Product.Remove(this);
            }
    
            if (TypeProduct != null)
            {
                if (!TypeProduct.Product.Contains(this))
                {
                    TypeProduct.Product.Add(this);
                }
    
                TypeProductID = TypeProduct.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TypeProduct")
                    && (ChangeTracker.OriginalValues["TypeProduct"] == TypeProduct))
                {
                    ChangeTracker.OriginalValues.Remove("TypeProduct");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TypeProduct", previousValue);
                }
                if (TypeProduct != null && !TypeProduct.ChangeTracker.ChangeTrackingEnabled)
                {
                    TypeProduct.StartTracking();
                }
            }
        }
    
        private void FixupEntity(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Entity item in e.NewItems)
                {
                    if (!item.Product.Contains(this))
                    {
                        item.Product.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Entity", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Entity item in e.OldItems)
                {
                    if (item.Product.Contains(this))
                    {
                        item.Product.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Entity", item);
                    }
                }
            }
        }

        #endregion
    }
}
